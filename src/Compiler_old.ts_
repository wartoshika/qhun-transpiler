import { Project } from "./config/Project";
import { DiagnosticError } from "./error/DiagnosticError";
import { TargetConstructor } from "./transpiler/TargetConstructor";
import { SupportedTarget } from "./transpiler/SupportedTarget";
import { LuaTarget } from "./transpiler/lua/LuaTarget";
import { UnsupportedError } from "./error/UnsupportedError";
import * as ts from "typescript";

/**
 * a class that scans every typescript file and can transpile every project related file
 */
export class Compiler {

    /**
     * @param project the current project data
     */
    constructor(
        private project: Project
    ) { }

    /**
     * compiles the given files
     * @param files the files to compile
     */
    public compile(files: string[]): boolean {

        // construct a ts program environment to get a diagnostic reporter and each involved source file
        const program = ts.createProgram(files, this.project.compilerOptions);
        const typeChecker = program.getTypeChecker();
        const diagnostic = ts.getPreEmitDiagnostics(program);

        // evaluate diagnostics
        if (!this.evaluateDiagnosticResult(diagnostic)) {
            return false;
        }

        // get the target constructor
        const targetCtor = this.getTargetConstructor();

        // iterate over every sourcefile and parse the AST
        program.getSourceFiles().forEach(file => {

            const target = new targetCtor(this.project, typeChecker, file);
            const targetCode = target.transpile();

            // put that code in the destination file
            console.log(targetCode);
        });
    }

    /**
     * check if there are diagnostic problems in the project and log those when they occur
     * @param result the diagnostic result
     * @returns true when no errors found. false if there are errors
     */
    private evaluateDiagnosticResult(result: ts.Diagnostic[]): boolean {

        const errors: string[] = [];

        // iterate over every result
        result.forEach(error => {

            // get the message text
            const message = ts.flattenDiagnosticMessageText(error.messageText, "\n");

            if (error.file) {
                const position = error.file.getLineAndCharacterOfPosition(error.start);
                errors.push(`${error.file.fileName} (${position.line + 1},${position.character + 1}): ${message}`);
            } else {
                errors.push(message);
            }
        });

        if (errors.length > 0) {

            throw new DiagnosticError([
                "Compiling aborted due to diagnostic errors in your project:",
                ...errors
            ].join("\n"));
        }

        return true;
    }

    /**
     * get the target constructor
     */
    private getTargetConstructor(): TargetConstructor {

        switch (this.project.target) {
            case SupportedTarget.lua:
                return LuaTarget;
            default:
                throw new UnsupportedError(`The given target ${this.project.target} is not supported!`);
        }
    }
}
